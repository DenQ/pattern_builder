// Generated by CoffeeScript 1.9.3
(function() {
  var Builder, BuilderChocolate, BuilderChocolateDark, Chocolate,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Chocolate = (function() {
    function Chocolate() {}

    Chocolate.prototype.milk = null;

    Chocolate.prototype.nuts = null;

    Chocolate.prototype.sugar = null;

    Chocolate.prototype.setMill = function(milk) {
      this.milk = milk;
      return null;
    };

    Chocolate.prototype.setNuts = function(nuts) {
      this.nuts = nuts;
      return null;
    };

    Chocolate.prototype.setSugar = function(sugar) {
      this.sugar = sugar;
      return null;
    };

    return Chocolate;

  })();

  BuilderChocolate = (function() {
    function BuilderChocolate() {}

    BuilderChocolate.prototype.chocolate = null;

    BuilderChocolate.prototype.getChocolate = function() {
      return this.chocolate;
    };

    BuilderChocolate.prototype.createNewChocolate = function() {
      return this.chocolate = new Chocolate();
    };

    BuilderChocolate.prototype.buildMilk = function() {};

    BuilderChocolate.prototype.buildNuts = function() {};

    BuilderChocolate.prototype.buildSugar = function() {};

    return BuilderChocolate;

  })();

  Chocolate = (function() {
    function Chocolate() {}

    Chocolate.prototype.milk = null;

    Chocolate.prototype.nuts = null;

    Chocolate.prototype.sugar = null;

    Chocolate.prototype.setMill = function(milk) {
      this.milk = milk;
      return null;
    };

    Chocolate.prototype.setNuts = function(nuts) {
      this.nuts = nuts;
      return null;
    };

    Chocolate.prototype.setSugar = function(sugar) {
      this.sugar = sugar;
      return null;
    };

    return Chocolate;

  })();

  BuilderChocolateDark = (function(superClass) {
    extend(BuilderChocolateDark, superClass);

    function BuilderChocolateDark() {
      return BuilderChocolateDark.__super__.constructor.apply(this, arguments);
    }

    BuilderChocolateDark.prototype.buildMilk = function() {
      this.chocolate.setMill(null);
      return null;
    };

    BuilderChocolateDark.prototype.buildNuts = function() {
      this.chocolate.setNuts(null);
      return null;
    };

    BuilderChocolateDark.prototype.buildSugar = function() {
      this.chocolate.setSugar(null);
      return null;
    };

    return BuilderChocolateDark;

  })(BuilderChocolate);

  Builder = (function() {
    function Builder() {}

    Builder.prototype.builderChocolate = null;

    Builder.prototype.setBuilderChocolate = function(builderChocolate) {
      this.builderChocolate = builderChocolate;
    };

    Builder.prototype.getChocolate = function() {
      return this.builderChocolate.getChocolate();
    };

    Builder.prototype.constructorChocolate = function() {
      this.builderChocolate.buildMilk();
      this.builderChocolate.buildNuts();
      this.builderChocolate.buildSugar();
      return null;
    };

    return Builder;

  })();

}).call(this);
